//? FLEX ====================================================================================================//
/*
https://fls.guru/flexbox.html
https://flexboxfroggy.com/#ru

//*Flexbox - это целый модуль, содержащий в себе набор свойств и их значений как для родителя flex-контейнера так и для его дочерних элементов flex-элементов. 
Основным преимуществом гибкой FLEX разметки является возможность изменять ширину/высоту пространство вокруг и порядок flex-элементов, 
для того чтобы наилучшим образом заполнить доступное пространство flex-контейнера.
	Свойства FLEX - контейнера. Применяются для flex-контейнера, обертки flex-элементов

//*display со значениями flex/inline-flex
	display: block / inline* (по умолчанию).  *зависит от тега
	display: flex;            Определяет блочный flex-контейнер. Преобразовывает все свои прямые, дочерние элементы во flex-элементы.
	display: inline-flex;     Определяет строчный flex-контейнер. Преобразовывает все свои прямые, дочерние элементы во flex-элементы.

	//*flex-wrap 
	Определяет смогут ли flex-элементы перемещаться на следующие строки когда перестают помещаться внутри flex-контейнера.
	flex-wrap:nowrap;             Значение по умолчанию (не нужно указывать). Flex-элементы не смогут перемещаться на следующие строки flex-контейнера.
	flex-wrap:wrap;                  Flex-элементы смогут перемещаться на следующие строки flex-контейнера.
	flex-wrap:wrap-reverse;  Flex-элементы смогут перемещаться на следующие строки flex-контейнера, но в обратном порядке.

	//*flex-direction 
	Устанавливает основную ось, таким образом определяет направление flex-элементов расположенных в flex-контейнере.
	flex-direction:row;               Значение по умолчанию (не нужно указывать). Основная ось горизонтальная. Все flex-элементы расположатся слева направо по горизонтали.
	flex-direction:row-reverse;       Все flex-элементы расположатся справа налево по горизонтали.
	flex-direction:column;            Основная ось сменится с горизонтальной на вертикальную. Все flex-элементы расположатся сверху вниз.
	flex-direction:column-reverse;    Основная ось сменится с горизонтальной на вертикальную. Все flex-элементы расположатся снизу вверх.

	//*justify-content
	Определяет выравнивание вдоль основной оси (направление зависит от значения свойства flex-direction).
	justify-content:flex-start;     Значение по умолчанию (не нужно указывать). Flex-элементы прижимаются к началу основной оси.
	justify-content:flex-end;       Flex-элементы прижимаются к концу основной оси.
	justify-content:center;         Flex-элементы располагаются по центру основной оси.
	justify-content:space-between;  Flex-элементы располагаются равномерно по основной оси. Первый элемент находится в начале оси, последний элемент находится в конце оси.
	justify-content:space-around;   Flex-элементы располагаются равномерно по основной оси .К каждому flex-элементу добавляется пространство слева и справа.
	justify-content:space-evenly;   Flex-элементы располагаются равномерно по основной оси с одинаковым пространством вокруг них.

	//*align-items
	Определяет выравнивание вдоль поперечной оси (направление зависит от значения свойства flex-direction).
	align-items:stretch;     Значение по умолчанию (не нужно указывать). Flex-элементы растягиваются на весь размер поперечной оси flex-контейнера.
	align-items:flex-start;  Flex-элементы прижимаются к началу поперечной оси.
	align-items:flex-end;    Flex-элементы прижимаются к концу поперечной оси.
	align-items:center;      Flex-элементы располагаются по центру поперечной оси.
	align-items:baseline;    Flex-элементы располагаются по базовой линии.

	//*align-content
	Устанавливает распределение пространства между и вокруг элементами контента вдоль поперечной оси flexbox контейнера /* align-content не принимает значения left и right 
	align-content: center; start; end; flex-start; flex-end; 
	align-content: normal; baseline;  first baseline; last baseline;
	align-content: space-between; space-around; space-evenly; stretch;   
	align-content: safe center;  unsafe center; Выравнивание переполнения

	//*order
	Управляет порядком, в котором располагаются flex-элементы внутри flex-контейнера.
	order:1; Значение по умолчанию (не нужно указывать).
	order:2;
	order:3;

	//*align-self
	Переопределяет для конкретного flex-элемента выравнивание вдоль поперечной оси (направление зависит от значения свойства flex-direction).
	align-self:auto;        Значение по умолчанию (не нужно указывать). Flex-элементы растягиваются на весь размер поперечной оси flex-контейнера.
	align-self:flex-start;  Flex-элементы прижимаются к началу поперечной оси.
	align-self:flex-end;    Flex-элементы прижимаются к концу поперечной оси.
	align-self:center;      Flex-элементы располагаются по центру поперечной оси.

	//*flex-basis
	Определяет размер элемента по умолчанию, до распределения оставшегося пространства. Значения могут быть в процентах пикселях и т.д.
	flex-basis:auto;    Значение по умолчанию (не нужно указывать). Flex-элемент будет занимать размер в зависимости от контента внутри него.
	flex-basis:200px;  Устанавливаем  flex-элементам начальную ширину в пикселях.
	flex-basis:20%;     Устанавливаем  flex-элементам начальную ширину в процентах.

	//*flex-grow
	Определяет возможность элемента увеличиваться в размере, при необходимости заполняя весь flex-контейнер. 0 запрещено. 1 разрешено.
	flex-grow:0;   Значение по умолчанию (не нужно указывать). Flex-элемент не может увеличится.
	flex-grow:1;   Flex-элемент увеличится, заполняя пространство flex-контейнера.

	//*flex-shrink
	Определяет возможность элемента уменьшаться в размере, при необходимости заполняя весь flex-контейер. 0 запрещено. 1 разрешено.
	flex-shrink:1;  Значение по умолчанию (не нужно указывать). Flex-элемент не может увеличится.
	flex-shrink:0;  Flex-элемент не может увеличится.

	//*Свойство flex.
	Сокращенная запись для flex-grow, flex-shrink и flex-basis (рекомендуется)
Определяет возможность элемента уменьшаться и увеличиваться в размере, при необходимости заполняя весь flex-контейнер (0 запрещено. 1 разрешено). 
А так же задаёт базовый размер.
	flex: 0 1 auto;     Значение по умолчанию (не нужно указывать). Flex-элемент не может увеличиваться, может уменьшаться. Базовый размер автоматический.
	flex: 1 1 auto;     Flex-элемент может увеличиваться, может уменьшаться. Базовый размер автоматический.
	flex: 0 0 200px;  Flex-элемент не может увеличиваться, не может уменьшаться. Базовый размер 200px.
	flex: 1 0 50%;     Flex-элемент может увеличиваться, не может уменьшаться. Базовый размер 50%.

	//*flex-flow.
	Это сокращение для свойств flex-direction и flex-wrap, которые вместе определяют основную и поперечные ось и возможность перемещаться по строкам. По умолчанию row nowrap. 
Это свойство принимает их значения, разделённые пробелом. Например,  flex-flow: row wrap, чтобы элементы располагались в ряд и автоматически переносились на новую строку.



//!  ====================================================================================================//
//? GRID ================================================================================================//
//!  ====================================================================================================//

CSS Grid Layout      https://fls.guru/grid.html 
https://cssgridgarden.com/#ru  GRID GARDEN

//*Свойство display
Контейнер-сетка бывает двух видов: обычный display: grid и встроенный display: inline-grid. 
Первый генерирует grid-контейнер уровня блока, второй — grid-контейнер уровня строки.
display: grid; Грид-контейнер определяется как блочный элемент.
display: inline-grid; Грид-контейнер определяется как блочно-строчный элемент.


//*Определение явной сетки===========//

//*Свойства: grid-template-rows, grid-template-columns, grid-template, grid-template-areas
Количество строк / столбцов определяется с помощью свойств grid-template-rows и grid-template-columns. Свойства не наследуются.
Каждый идентификатор сетки в значении grid-template-areas соответствует ячейке сетки. 
Как только все ячейки идентифицированы, браузер объединяет все смежные ячейки с одинаковыми именами в одну область, которая охватывает все их, при условии, что они описывают область прямоугольной формы. 
Если вы попытаетесь настроить более сложные области, весь шаблон будет недействительным и области сетки не будут определены.

display: grid;
grid-template-columns: 1fr 1fr 1fr;
grid-template-rows: 1fr 1fr;
fr — единица длины, которая позволяет создавать гибкие дорожки. Не является единицей измерения в обычном ее понимании, поэтому не может быть представлена или объединена с другими типами единиц в выражениях calc(). 
Общий размер фиксированных строк или столбцов вычитается из доступного пространства контейнера-сетки. Оставшееся пространство делится между строками и столбцами с гибкими размерами пропорционально их коэффициенту.

display: grid;
grid-template-columns: 20% 30% 20%;
grid-template-rows: 80% 120%;
Размеры в % вычисляются от ширины или высоты контейнера-сетки

display: grid;
grid-template-columns: minmax(200px,300px) minmax(100px,200px) minmax(250px,150px);
grid-template-rows: minmax(100px,110%) minmax(50px,1fr);
Функция minmax(min,max) определяет диапазон размеров, больше или равный min и меньше или равный max. 
Если max < min, то max игнорируется, а minmax(min,max) обрабатывается как min. Значения в fr можно устанавливать только как максимальное.

display: grid;
grid-template-columns: auto 1fr auto;
grid-template-rows: auto 1fr;
Значение auto ориентируется на содержимое элементов сетки одной дорожки. 
Как минимум, рассматривается как минимальный размер элемента сетки, как определено min-width или min-height. 
Как максимум, обрабатывается так же, как и max-content. Может растягиваться за счет свойств align-content и justify-content.

display: grid;
grid-template-columns: repeat(3,1fr);
grid-template-rows: repeat(2,1fr);
Нотация repeat() представляет повторяющийся фрагмент списка дорожек, что позволяет записать в более компактной форме большое количество одинаковых по размерам столбцов или строк.

display: grid;
grid-template-columns: repeat(auto-fill,minmax(150px, 1fr));
Используя значение auto-fill, вы всегда получите хотя бы один столбец, даже если он по какой-то причине не помещается в контейнер-сетку.

display: grid;
grid-template-columns: repeat(auto-fit,minmax(150px, 1fr));
Если вы используете auto-fit, то дорожки, которые не содержат элементы сетки, будут сброшены.

display: grid;
grid-template-columns: 150px 1fr;
grid-template-areas: 'header header' 'sidebar content' 'block-1 block-2' 'footer footer';
Свойство grid-template-areas определяет именованные области сетки, которые не связаны с каким-либо конкретным элементом сетки, но на которые можно ссылаться из свойств размещения сетки. 
Синтаксис свойства обеспечивает визуализацию структуры сетки, облегчая понимание общего макета контейнера-сетки. Свойство не наследуется.

//*auto-fill
ЗАПОЛНЯЕТ строку максимально возможным числом колонок.
Если в строку можно вместить новую колонку, она будет создана с четко заданной шириной,
потому что это ключевое слово пытается ЗАПОЛНИТЬ строку максимальным числом колонок.
Новые колонки могут быть пустыми, но они все же будут занимать место в строке.

//*auto-fit
ПОДСТРАИВАЕТ доступные на данный момент колонки под пространство, расширяя их, чтобы они могли занять все доступное пространство.
Браузер сначала заполняет свободное пространство дополнительными колонками (как auto-fill), после чего пустые колонки сжимаются.


//*Определение неявной сетки==================//

//*grid-auto-columns, grid-auto-rows, grid-auto-flow 
Если элемент сетки расположен в строке или столбце, размер которых не определен явно grid-template-rows или grid-template-columns, создаются неявные дорожки сетки для его хранения. 
Это может произойти в случае, если строка или столбец оказались за пределами установленных размеров сетки.
Элементы сетки, которые не размещены явно, автоматически помещаются в незанятое пространство в контейнере-сетке с помощью алгоритма автоматического размещения. 
Свойство grid-auto-flow управляет автоматическим размещением элементов сетки без явного положения. 
После заполнения явной сетки (или если явной сетки нет) автоматическое размещение также приведет к генерации неявных дорожек сетки. Свойство не наследуется.
По умолчанию эти автоматически добавляемые дорожки имеют минимальный необходимый размер. 
Свойства grid-auto-rows и grid-auto-columns позволяют контролировать размер неявных дорожек сетки. 
Если дано несколько размеров дорожек, шаблон повторяется по мере необходимости, чтобы найти размер неявных дорожек.
Первая неявная дорожка сетки после явной сетки получает первый заданный размер и так далее. Свойства не наследуются.

//*grid-auto
grid-auto-flow: row;    Алгоритм автоматического размещения размещает элементы, заполняя каждую строку по очереди слева-направо (для LTR-языков), добавляя новые строки по мере необходимости. Значение по умолчанию.
grid-auto-flow: column; Алгоритм размещает элементы, заполняя каждый столбец по очереди сверху-вниз, добавляя новые столбцы по мере необходимости.
grid-auto-flow: dense;  Алгоритм "плотной" укладки элементов. При необходимости может менять порядок следования элементов, заполняя пустые места более крупными элементами.


//*justify-items
Выравнивает содержимое вдоль оси строки (в отличии от align-items который выравнивает элементы вдоль вертикальной оси). 
Это значение применяется ко всем элементам сетки внутри контейнера. Свойство не наследуются.

justify-items: stretch; Заполняет всю ширину области (по умолчанию).
justify-items: start;   Выравнивает содержимое по левой стороне области.
justify-items: end;     Выравнивает содержимое по правой стороне области.
justify-items: center;  Выравнивает содержимое по центру области.

//*align-items
Выравнивает содержимое вдоль вертикальной оси (в отличии от justify-items который выравнивает элементы вдоль горизонтальной оси). 
Это значение применяется ко всем элементам сетки внутри контейнера. Свойство не наследуются.
align-items: stretch;    Заполняет всю ширину области (по умолчанию).
align-items: start;      Выравнивает содержимое по верхней стороне области.
align-items: end;        Выравнивает содержимое по нижней стороне области.
align-items: center;     Выравнивает содержимое по центру области.

//*justify-content
Выравнивает сетку вдоль горизонтальной оси (в отличии от align-content который выравнивает сетку вдоль вертикальной оси). Свойство не наследуются.
justify-content: start;     Выравнивает сетку по левой стороне контейнера.
justify-content: end;       Выравнивает сетку по правой стороне контейнера.
justify-content: center;  Выравнивает сетку по центру контейнера.
justify-content: stretch  Масштабирует элементы чтобы сетка могла заполнить всю ширину контейнера.
justify-content: space-around;  Одинаковое пространство между элементами, и полуразмерные отступы по краям.
justify-content: space-between; Одинаковое пространство между элементами, без отступов по краям.
justify-content: space-evenly;   Одинаковое пространство между элементами, и полноразмерные отступы по краям.

//*align-content
Выравнивает сетку вдоль вертикальной оси (в отличии от justify-content которое выравнивает сетку вдоль горизонтальной оси). Свойство не наследуются.
align-content: start;     Выравнивает сетку по верхней стороне контейнера.
align-content: end;       Выравнивает сетку по нижней стороне контейнера.
align-content: center;  Выравнивает сетку по центру контейнера.
align-content: stretch; Масштабирует элементы чтобы сетка могла заполнить всю ширину контейнера.
align-content: space-around;   Одинаковое пространство между элементами, и полуразмерные отступы по краям.
align-content: space-between; Одинаковое пространство между элементами, без отступов по краям.
align-content: space-evenly;     Одинаковое пространство между элементами, и полноразмерные отступы по краям.


//*+++Позиционирование+++

row-gap;            Задает отступ между строками.
column-gap;         Задает отступ между столбцами.
gap;                Краткая запись.

grid-row-start;      Начало строки. (Может иметь отрицательные значения)
grid-row-end;        Конец строки.  (Может иметь отрицательные значения)
grid-column-start;   Начало колонки.(Может иметь отрицательные значения)
grid-column-end;     Конец колонки. (Может иметь отрицательные значения)

grid-row-start: span;    Колличество строк.
grid-column-start: span; Колличество колонок.

grid-row: 1 /2;        Начало и конец ячейки
grid-column: 2 / 3;    Начало и конец ячейки

order; Задает порядок ячеек.


//todo Пример реализации галиреи ====================================================================================================//

.gallery__list {
	display: grid;
	gap: 10px;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

auto-fit - заставит переносится на новую строку
minmax(300px, 1fr) ширтна от 300px до 1fr
}

Аюсолютно позиционируем img относительно item.
Высоту задать через процентный паддинг
.gallery__item {
	position: relative;
	padding: 0px 0px 85% 0px;
	img{
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	Для item с модификатором _big будет двойная ширина и высота
	&_big{
		grid-column: span 2;
		grid-row: span 2;
	}
}

//todo ====================================================================================================//
